{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Jean-Nvim \u00b6 Overview \u00b6 Jean-Nvim is a lua library providing tools to ease the development of nvim plugins in Lua.","title":"Home"},{"location":"#jean-nvim","text":"","title":"Jean-Nvim"},{"location":"#overview","text":"Jean-Nvim is a lua library providing tools to ease the development of nvim plugins in Lua.","title":"Overview"},{"location":"api/api/","text":"unknown \u00b6","title":"Api Reference"},{"location":"api/api/#unknown","text":"","title":"unknown"},{"location":"api/autocommand/","text":"unknown \u00b6 Classes \u00b6 Autocommand \u00b6 Constructor \u00b6 Signature Autocommand ( event : any , options : any ) Parameter Type Description Default event * any options * any Methods \u00b6 delete() \u00b6 Signature function Autocommand : delete () -> nil","title":"unknown"},{"location":"api/autocommand/#unknown","text":"","title":"unknown"},{"location":"api/autocommand/#classes","text":"","title":"Classes"},{"location":"api/autocommand/#autocommand","text":"","title":"Autocommand"},{"location":"api/autocommand/#constructor","text":"Signature Autocommand ( event : any , options : any ) Parameter Type Description Default event * any options * any","title":"Constructor"},{"location":"api/autocommand/#methods","text":"","title":"Methods"},{"location":"api/autocommand/#delete","text":"Signature function Autocommand : delete () -> nil","title":"delete()"},{"location":"api/buffer/","text":"Buffer \u00b6 Object oriented wrapper around Neovim buffer. This class provides only an OO convenience wrapper around the various lua function that handle neovim buffers. No feature here, just another way to call the nvim lua api. Constructor \u00b6 Signature Buffer ( options : table [ any ]) Parameter Type Description Default options table[any] Buffer options. {} Notes Options should be a table of options to set on this buffer. It can be any buffer options or Buffer property. (For example, you can set a name key, and the buffer name will be set through the Buffer.name property). Usage local buffer = Buffer ({ name = \"otter list\" , listed = false , modifiable = false }) Properties \u00b6 Name Type Access Description ___ any read/write Get or set an option for this buffer. Wraps vim.bo . See the nvim documentation for a list of available options. handle number read-only Numerical id this buffer wraps. See name string read/write Name of the buffer. Wraps nvim_buf_get_name and nvim_buf_set_name . Methods \u00b6 from_handle() \u00b6 Wraps a neovim buffer. Signature function Buffer . from_handle ( handle : number ) -> nil Parameter Type Description Default handle * number Numerical buffer id. Notes Create an instance of Buffer that wraps the existing buffer with the given handle (buf). Usage local buffer = Buffer . wrap ( vim . api . nvim_get_current_buf ()) list() \u00b6 Return an iterator existing nvim buffers. Signature function Buffer . list () -> jlua . iterator Returns Description jlua.iterator An iterator of buffer. Notes Wraps nvim_list_bufs . Usage for buffer in Buffer . list () do buffer : delete () end append() \u00b6 Append lines to this buffer. Signature function Buffer : append ( lines : [ string ]) -> jlua . iterator Parameter Type Description Default lines * [string] The text line to append to the buffer. Returns Description jlua.iterator An iterator of buffer. Notes Wraps nvim_buf_set_lines . Usage buffer : set_lines ({ \"jean-jean\" , \"jean-jean jacques\" })","title":"Buffer"},{"location":"api/buffer/#buffer","text":"Object oriented wrapper around Neovim buffer. This class provides only an OO convenience wrapper around the various lua function that handle neovim buffers. No feature here, just another way to call the nvim lua api.","title":"Buffer"},{"location":"api/buffer/#constructor","text":"Signature Buffer ( options : table [ any ]) Parameter Type Description Default options table[any] Buffer options. {} Notes Options should be a table of options to set on this buffer. It can be any buffer options or Buffer property. (For example, you can set a name key, and the buffer name will be set through the Buffer.name property). Usage local buffer = Buffer ({ name = \"otter list\" , listed = false , modifiable = false })","title":"Constructor"},{"location":"api/buffer/#properties","text":"Name Type Access Description ___ any read/write Get or set an option for this buffer. Wraps vim.bo . See the nvim documentation for a list of available options. handle number read-only Numerical id this buffer wraps. See name string read/write Name of the buffer. Wraps nvim_buf_get_name and nvim_buf_set_name .","title":"Properties"},{"location":"api/buffer/#methods","text":"","title":"Methods"},{"location":"api/buffer/#from_handle","text":"Wraps a neovim buffer. Signature function Buffer . from_handle ( handle : number ) -> nil Parameter Type Description Default handle * number Numerical buffer id. Notes Create an instance of Buffer that wraps the existing buffer with the given handle (buf). Usage local buffer = Buffer . wrap ( vim . api . nvim_get_current_buf ())","title":"from_handle()"},{"location":"api/buffer/#list","text":"Return an iterator existing nvim buffers. Signature function Buffer . list () -> jlua . iterator Returns Description jlua.iterator An iterator of buffer. Notes Wraps nvim_list_bufs . Usage for buffer in Buffer . list () do buffer : delete () end","title":"list()"},{"location":"api/buffer/#append","text":"Append lines to this buffer. Signature function Buffer : append ( lines : [ string ]) -> jlua . iterator Parameter Type Description Default lines * [string] The text line to append to the buffer. Returns Description jlua.iterator An iterator of buffer. Notes Wraps nvim_buf_set_lines . Usage buffer : set_lines ({ \"jean-jean\" , \"jean-jean jacques\" })","title":"append()"},{"location":"api/context-handler/","text":"unknown \u00b6 Classes \u00b6 ContextHandler \u00b6 Constructor \u00b6 Signature ContextHandler ( namespace : any ) Parameter Type Description Default namespace * any Methods \u00b6 enable() \u00b6 Enable this context Signature function ContextHandler : enable () -> nil disable() \u00b6 Disable this context Signature function ContextHandler : disable () -> nil bind_function() \u00b6 Register a methood on self as a callback for a vim function Signature function ContextHandler : bind_function ( name : any ) -> nil Parameter Type Description Default name * any bind_autocommand() \u00b6 Register an autocommand for a method on self Signature function ContextHandler : bind_autocommand ( event : any , name : any , options : any ) -> nil Parameter Type Description Default event * any name * any options * any bind_user_autocommand() \u00b6 Register a user autocommand for a method on self Signature function ContextHandler : bind_user_autocommand ( name : any , options : any ) -> nil Parameter Type Description Default name * any options * any execute_user_autocommand() \u00b6 Execute an user autocommand Signature function ContextHandler : execute_user_autocommand ( name : any ) -> nil Parameter Type Description Default name * any bind_user_command() \u00b6 Register a user command for a method on self Signature function ContextHandler : bind_user_command ( name : any , options : any ) -> nil Parameter Type Description Default name * any options * any get_function_identifier() \u00b6 Signature function ContextHandler : get_function_identifier ( name : any ) -> nil Parameter Type Description Default name * any get_command_identifier() \u00b6 Signature function ContextHandler : get_command_identifier ( name : any ) -> nil Parameter Type Description Default name * any","title":"unknown"},{"location":"api/context-handler/#unknown","text":"","title":"unknown"},{"location":"api/context-handler/#classes","text":"","title":"Classes"},{"location":"api/context-handler/#contexthandler","text":"","title":"ContextHandler"},{"location":"api/context-handler/#constructor","text":"Signature ContextHandler ( namespace : any ) Parameter Type Description Default namespace * any","title":"Constructor"},{"location":"api/context-handler/#methods","text":"","title":"Methods"},{"location":"api/context-handler/#enable","text":"Enable this context Signature function ContextHandler : enable () -> nil","title":"enable()"},{"location":"api/context-handler/#disable","text":"Disable this context Signature function ContextHandler : disable () -> nil","title":"disable()"},{"location":"api/context-handler/#bind_function","text":"Register a methood on self as a callback for a vim function Signature function ContextHandler : bind_function ( name : any ) -> nil Parameter Type Description Default name * any","title":"bind_function()"},{"location":"api/context-handler/#bind_autocommand","text":"Register an autocommand for a method on self Signature function ContextHandler : bind_autocommand ( event : any , name : any , options : any ) -> nil Parameter Type Description Default event * any name * any options * any","title":"bind_autocommand()"},{"location":"api/context-handler/#bind_user_autocommand","text":"Register a user autocommand for a method on self Signature function ContextHandler : bind_user_autocommand ( name : any , options : any ) -> nil Parameter Type Description Default name * any options * any","title":"bind_user_autocommand()"},{"location":"api/context-handler/#execute_user_autocommand","text":"Execute an user autocommand Signature function ContextHandler : execute_user_autocommand ( name : any ) -> nil Parameter Type Description Default name * any","title":"execute_user_autocommand()"},{"location":"api/context-handler/#bind_user_command","text":"Register a user command for a method on self Signature function ContextHandler : bind_user_command ( name : any , options : any ) -> nil Parameter Type Description Default name * any options * any","title":"bind_user_command()"},{"location":"api/context-handler/#get_function_identifier","text":"Signature function ContextHandler : get_function_identifier ( name : any ) -> nil Parameter Type Description Default name * any","title":"get_function_identifier()"},{"location":"api/context-handler/#get_command_identifier","text":"Signature function ContextHandler : get_command_identifier ( name : any ) -> nil Parameter Type Description Default name * any","title":"get_command_identifier()"},{"location":"api/context/","text":"unknown \u00b6 Classes \u00b6 Context \u00b6 Constructor \u00b6 Signature Context () Methods \u00b6 add_function() \u00b6 Register a function in the context. Signature function Context : add_function ( name : any , callback : any ) -> nil Parameter Type Description Default name * any callback * any add_autocommand() \u00b6 Register an autocommand in the context. Signature function Context : add_autocommand ( events : any , options : any ) -> nil Parameter Type Description Default events * any options * any add_user_command() \u00b6 Register an user command in the context. Signature function Context : add_user_command ( name : any , callback : any , options : any ) -> nil Parameter Type Description Default name * any callback * any options * any map() \u00b6 Register a key mapping into the context Signature function Context : map ( mode : any , lhs : any , rhs : any , options : any ) -> nil Parameter Type Description Default mode * any lhs * any rhs * any options * any enable() \u00b6 Enable the context Signature function Context : enable () -> nil disable() \u00b6 Disable the context Signature function Context : disable () -> nil","title":"unknown"},{"location":"api/context/#unknown","text":"","title":"unknown"},{"location":"api/context/#classes","text":"","title":"Classes"},{"location":"api/context/#context","text":"","title":"Context"},{"location":"api/context/#constructor","text":"Signature Context ()","title":"Constructor"},{"location":"api/context/#methods","text":"","title":"Methods"},{"location":"api/context/#add_function","text":"Register a function in the context. Signature function Context : add_function ( name : any , callback : any ) -> nil Parameter Type Description Default name * any callback * any","title":"add_function()"},{"location":"api/context/#add_autocommand","text":"Register an autocommand in the context. Signature function Context : add_autocommand ( events : any , options : any ) -> nil Parameter Type Description Default events * any options * any","title":"add_autocommand()"},{"location":"api/context/#add_user_command","text":"Register an user command in the context. Signature function Context : add_user_command ( name : any , callback : any , options : any ) -> nil Parameter Type Description Default name * any callback * any options * any","title":"add_user_command()"},{"location":"api/context/#map","text":"Register a key mapping into the context Signature function Context : map ( mode : any , lhs : any , rhs : any , options : any ) -> nil Parameter Type Description Default mode * any lhs * any rhs * any options * any","title":"map()"},{"location":"api/context/#enable","text":"Enable the context Signature function Context : enable () -> nil","title":"enable()"},{"location":"api/context/#disable","text":"Disable the context Signature function Context : disable () -> nil","title":"disable()"},{"location":"api/logging/","text":"unknown \u00b6","title":"unknown"},{"location":"api/logging/#unknown","text":"","title":"unknown"},{"location":"api/path/","text":"unknown \u00b6 Classes \u00b6 Path \u00b6 Methods \u00b6 dir() \u00b6 Return an iterator over the children of this path. Signature function Path : dir () -> nil is_dir() \u00b6 Check if a path points to a directory Signature function Path : is_dir () -> nil is_file() \u00b6 Check if a path points to a file Signature function Path : is_file () -> nil to_absolute() \u00b6 Convert a relative path to an absolute. Signature function Path : to_absolute () -> nil","title":"unknown"},{"location":"api/path/#unknown","text":"","title":"unknown"},{"location":"api/path/#classes","text":"","title":"Classes"},{"location":"api/path/#path","text":"","title":"Path"},{"location":"api/path/#methods","text":"","title":"Methods"},{"location":"api/path/#dir","text":"Return an iterator over the children of this path. Signature function Path : dir () -> nil","title":"dir()"},{"location":"api/path/#is_dir","text":"Check if a path points to a directory Signature function Path : is_dir () -> nil","title":"is_dir()"},{"location":"api/path/#is_file","text":"Check if a path points to a file Signature function Path : is_file () -> nil","title":"is_file()"},{"location":"api/path/#to_absolute","text":"Convert a relative path to an absolute. Signature function Path : to_absolute () -> nil","title":"to_absolute()"},{"location":"api/test-suite/","text":"unknown \u00b6","title":"unknown"},{"location":"api/test-suite/#unknown","text":"","title":"unknown"},{"location":"api/user-command/","text":"unknown \u00b6 Classes \u00b6 UserCommand \u00b6 Constructor \u00b6 Signature UserCommand ( name : any , command : any , options : any ) Parameter Type Description Default name * any command * any options * any Methods \u00b6 delete() \u00b6 Delete the user command Signature function UserCommand : delete () -> nil","title":"unknown"},{"location":"api/user-command/#unknown","text":"","title":"unknown"},{"location":"api/user-command/#classes","text":"","title":"Classes"},{"location":"api/user-command/#usercommand","text":"","title":"UserCommand"},{"location":"api/user-command/#constructor","text":"Signature UserCommand ( name : any , command : any , options : any ) Parameter Type Description Default name * any command * any options * any","title":"Constructor"},{"location":"api/user-command/#methods","text":"","title":"Methods"},{"location":"api/user-command/#delete","text":"Delete the user command Signature function UserCommand : delete () -> nil","title":"delete()"},{"location":"usage/_index/","text":"","title":"Usage"},{"location":"usage/context/","text":"Context \u00b6","title":"Context"},{"location":"usage/context/#context","text":"","title":"Context"}]}